- question: "But I heard it was good..."
  answer: No.

- question: But it was like a whole module in the MCSD course I started 5 years ago...
  answer: No.

- question: "Wait, signing things and strong naming sounds like a good idea. Convince me."
  answer: |
    Consider this all too common occurrence:

    - Your application uses an OSS component called FancyLogging and you’re depending on the latest version 2.1.5.
    - You also use FancyServiceBus that depends on FancyLogging version 2.0.7.
    - You might also have a dependency on FancyIoC which in turn depends on a much older version of FancyLogging 2.0.0.

    Assuming that the authors of FancyLogging are following [Semantic Versioning](http://semver.org/), you should be able to happily use the latest version of FancyLogging because there are no semantically breaking changes between it and the versions that FancyServiceBus and FancyIoC were compiled against. 
    If these assemblies are strong named however, you just set yourself up for a whole lot of assembly version conflicts because .Net matches on the entire version number. 
    At this point, you’re going to be spending some quality time with the Fusion Log Viewer.

    Strong naming conflicts are a common issue when your dependencies improve or change rapidly, and you upgrade somewhat often, and especially when upstream dependencies like log4net, IoC containers, and Newtonsoft.Json are also used by your upstream dependencies.

    (This is borrowed from Jeremy Miller's blog. You can see the original post [here](http://jeremydmiller.com/2014/04/28/fubumvc-lessons-learned-strong-naming-woes-and-workarounds/).)

- question: But the governance committee says we need to sign our assemblies...
  answer: |
    Oh. Ok then.

      ...

    Wait. No.
    
    *insert reasons and workarounds here*

- question: "But [cool open source project] doesn't have strong naming and I need it in my enterprise app that I absolutely need to sign..."
  answer: |
    Don't hassle the developer to sign their project just so you can use it. There are several workarounds that you can use:

    - Use `ILDASM` and `ILASM` to [sign the assemblies after the fact](http://stackoverflow.com/questions/1379954/how-i-do-a-sign-an-assembly-that-has-already-been-built-into-a-dll-specifically).
    - Use Git submodules to fork the project into your project and build it yourself *examples please*
    - *anything else?*

- question: "But isn't strong naming a security thing?"
  answer: |
    Absolutely not. To quote MSDN, ["Do not rely on strong names for security. They provide a unique identity only."](http://msdn.microsoft.com/en-us/library/wd40t7ad(v=vs.110).aspx)

